<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://harishv.me/</title>
   
   <link>http://harishv.me</link>
   <description>My thoughts - on life & code.</description>
   <language>en-uk</language>
   <managingEditor> Harish V</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Top Todo App of 2016</title>
	  <link>/blog//Top-Todo-App-of-2016</link>
	  <author>Harish V</author>
	  <pubDate>2017-02-19T00:00:00+08:00</pubDate>
	  <guid>/blog//Top-Todo-App-of-2016</guid>
	  <description><![CDATA[
	     <p>There are a multitude of todo apps nowadays. Finding the right tool to keep your day organised is rather an individual choice - but there are definitely some apps which outshine others in terms of their features. The best apps offer advanced features such as notifications, reminders, lists and sublists and the list goes on. </p>

<h2 id="wunderlist">Wunderlist</h2>

<p><img src="http://imgur.com/vmpiDq5.png" alt="Wunderlist Main Screen" /></p>

<p>My vote for the best Todo application goes to Wunderlist. The name Wunderlist may be rather familiar to you considering it has been around since 2011. Though Wunderlist adopts a freemium model, I can safely say that the free version itself has plentiful of features that can satisfy any average user. </p>

<p>The best part of Wunderlist is its multi-platform support. The app is available on Windows, macOS, iOS, Android, Windows Phone, Kindle and Chromebook. Wunderlist also offers extensions on your favourite browsers: Chrome, Firefox and Safari. No matter where you are, you are always in sync. Add something on your Mac and it immediately shows up on your mobile phones.</p>

<p><img src="http://imgur.com/2OEZVgz.png" alt="Wunderlist ToDo" /></p>

<p>The second feature that makes Wunderlist the right tool for you is reminders. For every task that you add, you can specify both the due date and a reminder. This is my most used feature of Wunderlist as reminders ensure I am up to all my tasks even when I am not checking the app. Reminders are offered via the app as well as a personal email sent right to your inbox.</p>

<p>Todos added can also be specified to be recurring (daily, weekly, monthly, yearly or custom basis) and it is really simple to keep track of repeating tasks. Under each todo, Wunderlist also offers the support to add sub-tasks and notes. One thing the app does not offer is priority levels. You can also star important tasks which you can use to signify the priority. For more levels of priority, you can create individual priority lists and assign tasks to those. Alternatively, my recommendation is use Wunderlist tags. By appending “#tag_name” to tasks we can tag the task under a certain category. For priority levels for example, we can use <code class="highlighter-rouge">#high</code>, <code class="highlighter-rouge">#medium</code> and <code class="highlighter-rouge">#low</code>.</p>

<p>A huge plus of Wunderlist is its collaborative feature. I personally love using this feature whenever I am travelling with my friends or family. I simply create a shared list and all my friends or family members can easily edit the lists. They can also comment on the tasks I have added, making communication across the app really simple and easy.</p>

<p>The difference between the free version of Wunderlist and the Pro version is not stark, but it may make a difference for power users. Under the free version, we can add up to 5mb of files as attachments to tasks, assign up to 25 people, create up to 25 subtasks and choose from 20 backgrounds. The Pro version offers unlimited file size, assignments, subtasks and up to 30 backgrounds to choose from. Wunderlist Pro costs $4.99/month, but it seems that the basic or free version will easily satisfy the average user.</p>

<p>Check out the following link to Amazon for more information on Wunderlist, as well as a cool book which details Wunderlist for Writers!</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;OneJS=1&amp;Operation=GetAdHtml&amp;MarketPlace=US&amp;source=ac&amp;ref=tf_til&amp;ad_type=product_link&amp;tracking_id=harishv7-20&amp;marketplace=amazon&amp;region=US&amp;placement=B01DICYKRU&amp;asins=B01DICYKRU&amp;linkId=955dd407043325294afff9cffcfc76bf&amp;show_border=false&amp;link_opens_in_new_window=false&amp;price_color=333333&amp;title_color=0066c0&amp;bg_color=ffffff">
</iframe>

<p>Wunderlist’s features and great looking user interface certainly makes it one of the most compelling todo apps today. Use it and let us know your comments below!</p>

	  ]]></description>
	</item>

	<item>
	  <title>Top Email Clients for the New Mac</title>
	  <link>/blog//Top-Email-Clients-for-Mac</link>
	  <author>Harish V</author>
	  <pubDate>2017-02-19T00:00:00+08:00</pubDate>
	  <guid>/blog//Top-Email-Clients-for-Mac</guid>
	  <description><![CDATA[
	     <h2 id="apple-mail">Apple Mail</h2>

<p><img src="http://imgur.com/hm3hIAU.png" alt="Apple Mail" /></p>

<p><img src="https://support.apple.com/library/content/dam/edam/applecare/images/en_US/osx/yos_mail_conversations.png" alt="Apple Mail" /></p>

<p>Apple’s built in client, Mail, offers a neat interface for managing multiple email accounts at once. From experience, it integrates smoothly with all the popular service providers such as Google, Yahoo, Outlook and Office Enterprise accounts. It also offers markup capabilities to edit your PDF or image attachment right within the client. Spotlight on macOS also includes Mail attachments and emails into search. Mail comes installed by default on all new Macs.</p>

<h2 id="spark">Spark</h2>

<p><img src="https://sparkmailapp.com/img/new/index/all_devices.png" alt="Spark" /></p>

<p>Spark won “Best of 2016” award. Spark places itself as a client for users looking productivity. It has a Smart Inbox which allows you to focus on the most important emails by categorising new emails into  Personal, Notifications and Newsletters. Spark’s snooze feature helps you to get rid of emails that are not urgent. </p>

<p><img src="http://imgur.com/hZ07VF2.png" alt="Smart Search" /></p>

<p>My favourite feature of Spark is its smart search that support natural language. If you are looking for attachments from John, your colleague, simply typing “attachments from John” will bring the relevant results to you in an instant. Spark offers smart notifications, which helps you filter email notifications to only those of high priority. Signature support is also great in Spark as you just need to quickly swipe or choose between your frequently used signatures. </p>

<p>Spark offers an “Undo Send” feature which allows a delay of 5 seconds before sending the email. This may be useful for those who often send hurried emails as you can stop sending the email and continue edits. However, currently Spark does not allow for variable delay and it is fixed to 5 seconds.</p>

<p>Something that really stands out in Spark is its Quick Replies. You can quickly reply to any email with a preset of emotions such as Like, Thanks, Agree etc. And beyond all the hoard of features, Spark has a great UI that keeps you coming back to it. Spark comes free on both the Mac App Store for Macs and the iTunes Store for iOS devices. It’s definitely worth a try for all new users.</p>

<h2 id="airmail"> Airmail</h2>

<p><img src="http://imgur.com/kAhWBrC.png" alt="Airmail" /></p>

<p>I have been a loyal user of Airmail for about two years now. I made the switch from Apple’s Mail to Airmail primarily because of the Snooze function it offerred back then. At that time, Airmail seemed to be the best option as other alternatives (such as Spark) were not present. But a word of warning is that Airmail offers tons of preferences and settings which may not be for the average user. </p>

<p>Like Spark, Airmail has many of the features discussed. I personally like the “Undo Send” function which offers up to 120 seconds delay before sending an email which you clicked Send. It has already proved to be a crucial function in several scenarios.</p>

<p><img src="http://imgur.com/faZx1p1.png" alt="Markdown - Airmail" /></p>

<p>Airmail contains several themes which may appeal to different individuals. Also, Airmail offers crafting emails in Markdown, a popular language for blogging nowadays. It provides a immediate preview of the email by having a split screen view. With Markdown, you can easily create lists, and even embed your code blocks.</p>

<p>Airmail supports integrations with several productivity apps such as:</p>

<ul>
  <li>Calendar</li>
  <li>Reminders</li>
  <li>OmniFocus</li>
  <li>Wunderlist</li>
  <li>Todoist</li>
</ul>

<p>and many others!</p>

<p>While Airmail is not free, it comes at an affordable price of US$9.99.)</p>

	  ]]></description>
	</item>

	<item>
	  <title>What is Markdown?</title>
	  <link>/blog//What-is-Markdown</link>
	  <author>Harish V</author>
	  <pubDate>2017-02-18T00:00:00+08:00</pubDate>
	  <guid>/blog//What-is-Markdown</guid>
	  <description><![CDATA[
	     <p>Markdown is a markup language that can be easily converted to HTML or other formats. The best part of Markdown is that you can write it in plaintext format, yet format it using certain special characters such as hyphens (<code class="highlighter-rouge">-</code>), quotes etc. Even this post was rendered with Markdown. Let’s see how we can craft posts with Markdown.</p>

<h2 id="headings">Headings</h2>

<p>Similar to HTML, Markdown supports six levels of headings, from H1 to H6. To achieve different headings, we simply use the <code class="highlighter-rouge">#</code> to denote the level. For example:</p>

<p><code class="highlighter-rouge"># Hello</code> yields a H1 header while <code class="highlighter-rouge">## Hello</code> yields a H2 header. Here’s a demo:</p>

<h1 id="h1-header">H1 header</h1>

<h2 id="h2-header">H2 header</h2>

<h3 id="h3-header">H3 header</h3>

<h4 id="h4-header">H4 header</h4>

<h5 id="h5-header">H5 header</h5>

<h6 id="h6-header">H6 header</h6>

<h2 id="bold-italics-underline-and-strikethrough">Bold, Italics, Underline and Strikethrough</h2>

<p>To give sufficient emphasis we can use the following syntax:</p>

<p>```markdown
Text can be made bold by using a <strong>double asterisks</strong> or <strong>double underscores</strong> at both the start and end of the text segment.</p>

<p>Text can be made italics by using a single asterisk or single underscore at both the start and end of the text segment.</p>

<p>To combine both bold and italics, we can use both the above notations like <em><strong>this</strong></em>.</p>

<p>To make a strikethrough, we can use two tildes at the start and end of the text segment ~~like this~~.
```</p>

<p>Text can be made bold by using a <strong>double asterisks</strong> or <strong>double underscores</strong> at both the start and end of the text segment.</p>

<p>Text can be made italics by using a single asterisk or single underscore at both the start and end of the text segment.</p>

<p>To combine both bold and italics, we can use both the above notations like <em><strong>this</strong></em>.</p>

<p>To make a strikethrough, we can use two tildes at the start and end of the text segment ~~like this~~.</p>

<h2 id="making-lists">Making Lists</h2>

<p>Lists are one of the most needed features for anyone writing anything! Markdown offers a nifty feature for making lists that is super easy to write.</p>

<h3 id="ordered-numbered-lists">Ordered (Numbered) Lists</h3>

<p>To make numbered lists, we simply start with <code class="highlighter-rouge">1. </code> and markdown interprets whatever comes after as the first point of the list. You can create nested lists with three spaces followed by a number.</p>

<p><code class="highlighter-rouge">markdown
1. Hello World
2. This is a numbered list.
   3. This is a nested numbered list.
</code>
The above gives us the following result:</p>

<ol>
  <li>Hello World</li>
  <li>This is a numbered list.
    <ol>
      <li>This is a nested numbered list.</li>
    </ol>
  </li>
</ol>

<h3 id="unordered-lists">Unordered Lists</h3>

<p>To make unordered lists, we can use asterisks (*), minuses (-), pluses (+).</p>

<p><code class="highlighter-rouge">markdown
* Unordered point 1
+ Unordered point 2
- Unordered point 3
</code></p>

<p>The above will now translate to:</p>

<ul>
  <li>Unordered point 1</li>
  <li>Unordered point 2</li>
  <li>Unordered point 3</li>
</ul>

<h3 id="combining-ordered-and-unordered-lists">Combining Ordered and Unordered Lists</h3>

<p>To combine and nest ordered and unordered lists, we just need to add trailing spaces before the next point followed by a number/asterisk/minus/plus.</p>

<p><code class="highlighter-rouge">markdown
1. Ordered point 1
2. Ordered point 2
   * Unordered point nested under point 2
3. Ordered point 3
   1. Ordered point 1 under point 3
</code>
Result:</p>

<ol>
  <li>Ordered point 1</li>
  <li>Ordered point 2
    <ul>
      <li>Unordered point nested under point 2</li>
    </ul>
  </li>
  <li>Ordered point 3
    <ol>
      <li>Ordered point 1 under point 3</li>
    </ol>
  </li>
</ol>

<h2 id="adding-links">Adding Links</h2>

<p>Hyperlinks are one of the most commonly used features in any document, blog etc. Adding links in Markdown is really simple too!</p>

<p>To add a hyperlink on a text, we use both square brackets <code class="highlighter-rouge">[]</code> and round brackets <code class="highlighter-rouge">()</code>.</p>

<p>First we put the text we want to hyperlink into the square brackets, in this example, Google: <code class="highlighter-rouge">[Google]</code>. Next, we hyperlink by adding the actual web address in between round brackets right after the square brackets, like this:</p>

<p><code class="highlighter-rouge">markdown
[Google](http://www.google.com)
</code></p>

<p>Rendering the markdown, we get this:</p>

<p><a href="http://google.com">Google</a></p>

<h2 id="adding-images">Adding Images</h2>

<p>Adding images is very similar to adding links. All we need to do is to add an exclamation mark in front of the square brackets. The alt text for the image goes into the square brackets and web address into the round brackets. Suppose we want to display the Google logo, we do this:</p>

<p><code class="highlighter-rouge">markdown
![Google Logo](https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Google_2015_logo.svg/2000px-Google_2015_logo.svg.png)
</code></p>

<p>And this renders as:</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Google_2015_logo.svg/2000px-Google_2015_logo.svg.png" alt="Google Logo" /></p>

<h2 id="blockquotes">Blockquotes</h2>

<p>Blockquotes are handy to specify sections which have been to quoted from another source. They are commonly used in emails where you can highlight the point you are addressing with regards to a previous email. To add a block quote, you use the <code class="highlighter-rouge">&gt;</code> sign.</p>

<p><code class="highlighter-rouge">markdown
&gt; This is a blockquote.
&gt; This is the second line of the blockquote.
</code></p>

<blockquote>
  <p>This is a blockquote.
This is the second line of the blockquote.</p>
</blockquote>

<h2 id="adding-code">Adding Code</h2>

<p>Markdown supports adding code and syntax-highlighting. This is a joy for any programmer or developer. I am personally a heavy user of this feature to make my notes/articles. To add a code block, we wrap the code with three backticks: “```” .</p>

<p>```</p>

<p>This is a general code block as there is no language specified.</p>

<p>```</p>

<p>We can add code blocks by specifying the language as well. We do this by adding the language name right after the first “```”. For example, lets add a Python code block.</p>

<figure class="highlight"><pre><code class="language-markdown" data-lang="markdown"><span class="sb">```</span>python
def print_hello_world():
    print("Hello World!");
    
print_hello_world();
<span class="sb">```</span></code></pre></figure>

<p>Writing the above renders into:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">print_hello_world</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Hello World!"</span><span class="p">);</span>
    
<span class="n">print_hello_world</span><span class="p">();</span></code></pre></figure>

<p>Similarly, Markdown supports an astonishing variety of languages!</p>

<p>Sometimes, you just want to highlight a specific word like <code class="highlighter-rouge">this</code>. That’s called inline code. To add inline code, we just use one backtick.</p>

<figure class="highlight"><pre><code class="language-markdown" data-lang="markdown"><span class="sb">`inline code`</span></code></pre></figure>

<p>gives us <code class="highlighter-rouge">inline code</code>.</p>

<h2 id="adding-tables">Adding Tables</h2>

<p>Yup, there is support for adding tables too! Now you can easily add tables with markdown to all your emails instead of creating them elsewhere and painstakingly copying them over to ensure in-tact formatting.</p>

<p>We use fences to make tables in markdown. A typical markdown table looks like this:</p>

<p><code class="highlighter-rouge">markdown
| Fruits    | Cost   | Quantity  | Total |Supplier   |
| :-------- |-------:| ---------:|------:|:---------:|
| Apples    | $2     |   160     |$320   |XYZ Company|
| Oranges   | $3     |   120     |$360   |ABC Company|
| Pears     | $4     |   100     |$400   |123 Company|
</code></p>

<p>Colons help us align the content within the columns. You can also add emphasis (bold, italics, strikethrough) in the tables.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Fruits</th>
      <th style="text-align: right">Cost</th>
      <th style="text-align: right">Quantity</th>
      <th style="text-align: right">Total</th>
      <th style="text-align: center">Supplier</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Apples</td>
      <td style="text-align: right">$2</td>
      <td style="text-align: right">160</td>
      <td style="text-align: right">$320</td>
      <td style="text-align: center">XYZ Company</td>
    </tr>
    <tr>
      <td style="text-align: left">Oranges</td>
      <td style="text-align: right">$3</td>
      <td style="text-align: right">120</td>
      <td style="text-align: right">$360</td>
      <td style="text-align: center">ABC Company</td>
    </tr>
    <tr>
      <td style="text-align: left">Pears</td>
      <td style="text-align: right">$4</td>
      <td style="text-align: right">100</td>
      <td style="text-align: right">$400</td>
      <td style="text-align: center">123 Company</td>
    </tr>
  </tbody>
</table>

<p>As you can it is a really neat way to make tables! Placing the colon on either sides of the dividing line indicates how the content for the column will be aligned. Colon on left helps left-align (see column <code class="highlighter-rouge">Fruits</code>). Colon on the right helps right-align (see columns <code class="highlighter-rouge">Cost</code>, <code class="highlighter-rouge">Quantity</code> and <code class="highlighter-rouge">Total</code>). Colons on both sides centers the column’s content (see column <code class="highlighter-rouge">Supplier</code>).</p>

<h2 id="horizontal-line-breaks">Horizontal Line Breaks</h2>

<p>To have horziontal lines as dividers, we can use three asterisks (*), hyphens (-) or underscores (_).</p>

<p>For example:</p>

<figure class="highlight"><pre><code class="language-markdown" data-lang="markdown">Horizontal line 1:
<span class="p">
***
</span>
Horizontal line 2:
<span class="p">
---
</span>
Horizontal line 3:
<span class="ge">__</span>_</code></pre></figure>

<p>renders as:</p>

<p>Horizontal line 1:</p>

<hr />

<p>Horizontal line 2:</p>

<hr />

<p>Horizontal line 3:
___</p>

<p>And that’s it folks! Markdown is a handy and simply language to learn that can help to save loads of time for plaintext lovers. Already planning on which Markdown editor to use? A new article is coming right on that. Meanwhile, give Markdown a try and share your comments below 👇🏼!</p>

	  ]]></description>
	</item>

	<item>
	  <title>Asynchronous Programming in Node.JS</title>
	  <link>/blog//Asynchronous-Programming</link>
	  <author>Harish V</author>
	  <pubDate>2016-07-30T00:00:00+08:00</pubDate>
	  <guid>/blog//Asynchronous-Programming</guid>
	  <description><![CDATA[
	     <p>Let’s imagine a restaurant reservation application where 10 people are trying to book at the same time. It will be really inconvenient if the 10th person has wait for the 9 others to finish their bookings first. The database calls can take considerable amount of time. With asynchronous programming, we can run multiple requests at the same time.</p>

<p>Instead of running things one by one, we can use the concepts of callbacks and promises to have our code to do something while something else is happening. For example, when one user has submitted his booking, while this request is being processed on the backend, the web application can service another request from the next user.</p>

<p>A simple demo:</p>

<p>Let’s consider this program (app.js):</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"ONE"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"TWO"</span><span class="p">);</span></code></pre></figure>

<p>Running this with <code class="highlighter-rouge">node app.js</code> will print this:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">ONE</span>
<span class="nx">TWO</span></code></pre></figure>

<p>Let’s replace this code in <code class="highlighter-rouge">app.js</code> with:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"ONE"</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"TWO"</span><span class="p">);</span></code></pre></figure>

<p>Running this now prints:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">TWO</span>
<span class="nx">ONE</span></code></pre></figure>

<p>This demonstrates asynchronous programming with callbacks. The function inside setTimeout is the callback function after the 1000 milliseconds have passed. During this 1000 milliseconds, the program continues on to execute the next instruction which is to log “TWO” to the console.</p>

	  ]]></description>
	</item>

	<item>
	  <title>ReactJS Workshop</title>
	  <link>/blog//ReactJS-Workshop</link>
	  <author>Harish V</author>
	  <pubDate>2016-06-22T00:00:00+08:00</pubDate>
	  <guid>/blog//ReactJS-Workshop</guid>
	  <description><![CDATA[
	     <p>Recently, I had the pleasure of conducting the 3rd Hackerschool workshop in the series on React JS. React is an amazing UI library (commonly misunderstood as a framework). Unlike a framework that typically deals with all the 3 main areas of Model, View and Controller layers (see my <a href="http://harishv.me/tech/general/techstuff/2015/10/02/MVC-Design-Pattern.html">MVC post</a>, React is a Javascript library for building user interfaces.</p>

<p>Initially I thought React is just one of another Javascript framework or library that pops up and fades away. But no, React is just amazing and it’s popularity has been growing ever since it’s release.</p>

<p>To know why, you can check out one of the many React tutorials out there. In the workshop, I basically covered a simple todo app which can be built with ReactJS.</p>

<p>The workshop materials are available on <a href="https://github.com/harishv7/reactjs">Github</a> and <a href="http://harishv7.github.io/reactjs/#/">here</a>.</p>

<p>I’ll try and write the tutorial out as a blog post sometime. <br /></p>

<p>Till next time, <br />
Cheers, <br />
Harish V</p>

	  ]]></description>
	</item>

	<item>
	  <title>Data Science Student Challenge 2016 Experience</title>
	  <link>/blog//Data-Science-Student-Challenge-Experience</link>
	  <author>Harish V</author>
	  <pubDate>2016-03-29T00:00:00+08:00</pubDate>
	  <guid>/blog//Data-Science-Student-Challenge-Experience</guid>
	  <description><![CDATA[
	     <h2 id="about-the-challenge--our-product">About the Challenge &amp; Our Product</h2>

<p>Recently, I had the opportunity to participate in the Data Science Student Challenge which was co-organised and sponsored by Microsoft.</p>

<p>I took part in this event together with my friends Alvian, Chris &amp; Ida. We worked tirelessly over just 24 hours to build a full-fledged working application which integrates the concepts of machine learning and data science. And the result of our effort was “Prosper”.</p>

<p>The following extract is from our Github page.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Prosper</span> <span class="n">stands</span> <span class="k">for</span> <span class="no">Property</span> <span class="no">Resale</span> <span class="no">Price</span> <span class="no">Forecaster</span><span class="o">.</span>

<span class="no">It</span> <span class="n">is</span> <span class="n">essentially</span> <span class="n">an</span> <span class="n">application</span> <span class="n">that</span> <span class="n">can</span> <span class="n">predict</span> <span class="n">the</span> <span class="n">future</span> <span class="n">resale</span> <span class="n">value</span> <span class="n">of</span> <span class="n">your</span> <span class="n">flat</span> <span class="p">(</span><span class="k">in</span> <span class="no">Singapore</span><span class="p">)</span><span class="o">!</span> <span class="no">Sounds</span> <span class="n">exciting?</span>

<span class="no">We</span> <span class="n">have</span> <span class="n">combined</span> <span class="n">the</span> <span class="n">power</span> <span class="n">of</span> <span class="no">Microsoft</span> <span class="no">Azure</span><span class="err">'</span><span class="n">s</span> <span class="no">Machine</span> <span class="no">Learning</span> <span class="n">capabilities</span> <span class="n">together</span> <span class="n">with</span> <span class="n">the</span> <span class="n">resale</span> <span class="n">flat</span> <span class="n">data</span> <span class="n">from</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">data</span><span class="p">.</span><span class="nf">gov</span><span class="p">.</span><span class="nf">sg</span> <span class="n">to</span> <span class="n">utilise</span> <span class="n">over</span> <span class="mi">15</span> <span class="n">years</span> <span class="n">of</span> <span class="n">data</span> <span class="n">and</span> <span class="mi">480</span><span class="p">,</span><span class="mo">000</span> <span class="n">data</span> <span class="n">points</span> <span class="k">for</span> <span class="n">an</span> <span class="n">astonishing</span> <span class="mi">95</span><span class="o">%</span> <span class="p">(</span><span class="n">error</span> <span class="n">margin</span> <span class="n">of</span> <span class="o">+-</span><span class="mi">5</span><span class="o">%</span><span class="p">)</span> <span class="n">accuracy</span> <span class="k">in</span> <span class="n">prediction</span> <span class="n">of</span> <span class="n">the</span> <span class="n">price</span><span class="o">.</span>

<span class="no">As</span> <span class="n">a</span> <span class="n">pro</span> <span class="n">analytics</span> <span class="n">feature</span><span class="p">,</span> <span class="no">Prosper</span> <span class="n">also</span> <span class="n">provides</span> <span class="n">a</span> <span class="n">suggestion</span> <span class="n">on</span> <span class="k">when</span> <span class="n">you</span> <span class="n">should</span> <span class="n">be</span> <span class="n">selling</span> <span class="n">your</span> <span class="n">flat</span> <span class="n">based</span> <span class="n">on</span> <span class="n">your</span> <span class="n">expected</span> <span class="n">annual</span> <span class="n">growth</span> <span class="n">rate</span> <span class="n">of</span> <span class="n">the</span> <span class="n">flat</span> <span class="n">price</span><span class="o">.</span> <span class="no">Hence</span><span class="p">,</span> <span class="n">the</span> <span class="n">application</span> <span class="n">tries</span> <span class="n">to</span> <span class="n">maximise</span> <span class="n">your</span> <span class="n">profit</span> <span class="n">given</span> <span class="n">the</span> <span class="n">expected</span> <span class="n">growth</span> <span class="n">price</span> <span class="n">per</span> <span class="n">annum</span><span class="o">.</span>

<span class="no">This</span> <span class="n">application</span> <span class="n">runs</span> <span class="n">using</span> <span class="no">Java</span> <span class="n">and</span> <span class="n">you</span> <span class="n">can</span> <span class="n">download</span> <span class="n">it</span> <span class="n">from</span> <span class="n">the</span> <span class="no">Releases</span> <span class="n">page</span><span class="o">.</span>

<span class="no">Prosper</span> <span class="n">was</span> <span class="n">developed</span> <span class="k">in</span> <span class="mi">24</span> <span class="n">hours</span> <span class="k">in</span> <span class="n">the</span> <span class="no">National</span> <span class="no">University</span> <span class="n">of</span> <span class="no">Singapore</span> <span class="p">(</span><span class="no">NUS</span><span class="p">)</span> <span class="no">Data</span> <span class="no">Science</span> <span class="no">Student</span> <span class="no">Challenge</span> <span class="n">supported</span> <span class="n">by</span> <span class="no">Mircosoft</span><span class="o">.</span>

<span class="no">Prosper</span> <span class="n">managed</span> <span class="n">to</span> <span class="n">secure</span> <span class="n">the</span> <span class="mi">5</span><span class="n">th</span> <span class="n">place</span> <span class="n">among</span> <span class="n">dozens</span> <span class="n">of</span> <span class="n">teams</span> <span class="n">at</span> <span class="no">NUS</span> <span class="no">Data</span> <span class="no">Science</span> <span class="no">Student</span> <span class="no">Challenge</span> <span class="mi">2016</span><span class="o">.</span></code></pre></figure>

<p>Below are some screenshots of the application. You can download and give Prosper a try <a href="https://github.com/harishv7/Prosper/releases">here</a>.</p>

<h2 id="experience">Experience</h2>

<p>While it was extremely tiring, it was really a fulfilling experience. In that intense 24 hours, I actually learnt so much skills. It also proved that to learn something new, we only needed the determination and the dedication to pursue it.</p>

<p>Alvian has always been interested in the topics of data science and machine learning. Naturally, he was able to lead our discussion and ideas prior to the building of the actual application. I was in charge of developing the desktop client to communicate with the APIs provided by Microsoft Azure.</p>

<p>Initially, I tried using simple AJAX calls through a website. However, it did not work due to some error relating to the blockage of “Cross-Origin Requests”. After about 2 hours and going through multiple StackOverflow questions, we decided to change track. I never thought my experience in a previous module, CS2103 Software Engineering, will help me. I used the good old legacy language Java as it was stable and what everyone in my team knew best. Our technology stack was essentially JavaFX to design the layout the GUI and pure Java for the backend logic.</p>

<p>Both Ida and Chris helped me and Alvian to get the building of the application done. Meanwhile, Alvian started training the model for our app with the data provided by <a href="https://data.gov.sg/developer">https://data.gov.sg/developer</a>.</p>

<p>After getting through the initial round, my team was selected for the finals where we had to present to a panel of judges. It was really a tough experience. Imagine 24 hours++ without sleep and still needing the energy to be able to present lively to the audience in front of you.</p>

<p>While we did not obtain the top 3 prizes, I was definitely overjoyed to have my team in the 5th place considering that we were all just sophomores in NUS without much experience in these field. I definitely look forward to participating in the next challenge.</p>

<h2 id="screenshots">Screenshots</h2>

<p><img src="http://i.imgur.com/UyzzCLM.png" alt="Image1" />
<img src="http://i.imgur.com/eWqAGKg.png" alt="Image2" /></p>

<p>Cheers, <br />
Harish V</p>

	  ]]></description>
	</item>

	<item>
	  <title>Gamecraft 2015!</title>
	  <link>/blog//Gamecraft-2015</link>
	  <author>Harish V</author>
	  <pubDate>2015-12-06T00:00:00+08:00</pubDate>
	  <guid>/blog//Gamecraft-2015</guid>
	  <description><![CDATA[
	     <p><img src="http://i.imgur.com/KnFi8cM.png " alt="TwistedMaze Logo" style="width: 200px;" /></p>

<p>I recently participated in Gamecraft 2015. This is my 2nd time participating this is “game-hackathon”. This time my team consisted of Al, Ted, Chris &amp; myself. The theme for this year was “Twist”. As usual, the interpretation of this theme in relation to the game was left open to us.</p>

<p>One of the first things that came to my mind was a maze that twists. As I was imagining this idea, I suddenly had this inspiration from this book <a href="https://en.wikipedia.org/wiki/The_Maze_Runner">The Mazerunner</a>. It is a book where a group of “hostages” have to escape from a ever-changing labyrinth. There has also been a movie released with the same name.</p>

<p>I suggested this idea and we tried brainstorming a few ideas before settling and finalising on this one. After this decision, we focused our efforts towards the game development. Me and Chris took on the roles of the game design where we made the shifting maps for the maze and the necessary sprites.</p>

<p>Ted was the sound engineer and gather suitable sounds for use in the game. Al, being the lead programmer of the group, devoted his attention to the game physics and the actual coding of the game.</p>

<p>We utilised Unity for the game and eventually (after 24 hrs) managed to come up with a finished game, TwistedMaze. TwistedMaze is available for download (both Mac and Windows versions) at <a href="https://github.com/harishv7/TwistedMaze/releases">GitHub</a>.</p>

<p>Future work on porting the game to Android and iOS is currently being discussed.</p>

<p>Hope you enjoy playing the game as much as we enjoyed creating it. :)</p>

<p>Cheers, <br />
Harish V</p>

	  ]]></description>
	</item>

	<item>
	  <title>MVC Design Pattern</title>
	  <link>/blog//MVC-Design-Pattern</link>
	  <author>Harish V</author>
	  <pubDate>2015-10-02T00:00:00+08:00</pubDate>
	  <guid>/blog//MVC-Design-Pattern</guid>
	  <description><![CDATA[
	     <h1 id="introduction">Introduction</h1>

<p>Model-View-Controller (MVC) is one of the most popular design patterns in the software/web development world. The MVC model was popularised by the Spring Framework, Ruby on Rails and Django.</p>

<p>As the name suggests, there are three main components of this pattern: Model, View and Controller. An application can be divided into these components which will then interact with one another to achieve the intended objective.</p>

<h1 id="interaction-overview">Interaction Overview</h1>

<p><img src="http://i.imgur.com/U7Z1Eir.png" /></p>

<h1 id="model">Model</h1>

<p>The model component can be summarised to contain objects that provide the logic implementation for the application. Typically, these objects correspond with the storage to retrieve/update/store data.</p>

<p>As stated on <a href="https://msdn.microsoft.com/en-us/library/dd381412(v=vs.108).aspx">the MSN MVC Overview</a>, for small applications, the model does not necessarily refer to a physical layers and its subclasses. If an application just reads a dataset and passes it to the view, then the dataset there takes the role of the model.</p>

<h1 id="view">View</h1>

<p>View essentially contains the objects/components dealing with the user interface (UI) of the application. The view typically reflects and outputs the data from the model layer. If the model consists of a dataset of students, then the view probably contains a table view of the details of the students with fields such as the First Name, Last Name, Age, Matriculation Number and so on.</p>

<h1 id="controller">Controller</h1>

<p>Controller are components which handle the user interaction and communicate directly with the model, depending on what the user’s request is. Based on this communication and response, it then selects a view to render. For example, if the user searches for a specific student’s name, the controller then passes the query to the model which then looks up the database, applies necessary filters and then returns the data representing the student (assuming it is a valid search). The controller will now select the appropriate view to present the data to the user. For example, views may change based on the platform (PC/mobile phone/tablet) or the type of user accounts (root/admin/guest) etc.</p>

<h1 id="implementation--advantages">Implementation &amp; Advantages</h1>

<p>There are several ways the MVC can be implemented. For example, one can choose to divide the interactions both on the client and server side for a web application.</p>

<p>The MVC model can come in particularly handy to organise the structure of an application during development. It can help in parallel development as different members of the team can work on the various components together. Another advantage is that we can separate the concerns of the application in a distinct manner which allows for better developer focus.</p>


	  ]]></description>
	</item>

	<item>
	  <title>Tutorial - Introduction to HTML (Part 2)</title>
	  <link>/blog//Introduction-to-HTML-Part-2</link>
	  <author>Harish V</author>
	  <pubDate>2015-09-24T00:00:00+08:00</pubDate>
	  <guid>/blog//Introduction-to-HTML-Part-2</guid>
	  <description><![CDATA[
	     <h1 id="recap">Recap</h1>

<p>In <a href="http://harishv7.github.io/tech/general/techstuff/2015/09/20/Introduction%20to%20HTML%20P1.html">part 1</a>, we covered the basics of HTML, the structure, declaring headings, paragraphs and adding images in a HTML file.</p>

<hr />

<h1 id="introduction">Introduction</h1>
<p>In this section, we look at hyperlinks, making lists (ordered/unordered/nested), making comments, adding styles (fonts, colors, background color, bold, italics) &amp; tables.</p>

<hr />

<h1 id="hyperlinks">Hyperlinks</h1>
<p>Hyperlinks are links such as <a href="">this</a>. These are the words or images you click to go to a new page! To link a word to point to another page/image etc., we can use the <code class="highlighter-rouge">&lt;a&gt;</code> tag.</p>

<p>A simple example will look like this:
<code class="highlighter-rouge">
	&lt;a href="www.google.com"&gt;Google&lt;/a&gt;
</code></p>

<p>This translates into: <br />
<a href="www.google.com">Google</a></p>

<p>Now when you click on “Google”, it brings you right to Google’s homepage. You can observe this by simply hovering your mouse on “Google”. Your browser shows where the link points to at the bottom of the browser.</p>

<p>Hyperlinks come in handy when you need to redirect your users/viewers to another webpage.</p>

<hr />

<h1 id="lists">Lists</h1>
<p>Lists have mainly 2 forms: ordered and unordered. We can create an ordered (numbered) list of things in HTML by using the <code class="highlighter-rouge">&lt;ol&gt;</code> tag.
Similarly, we can create unordered(bullet) lists in HTML by using <code class="highlighter-rouge">&lt;ul&gt;</code> tag instead of <code class="highlighter-rouge">&lt;ol&gt;</code>.</p>

<p><em>Example: Ordered List</em></p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;ol&gt;</span>
	<span class="nt">&lt;li&gt;</span> List point no. 1 <span class="nt">&lt;/li&gt;</span>
	<span class="nt">&lt;li&gt;</span> List point no. 2 <span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ol&gt;</span></code></pre></figure>

<p>This translates into: <br /></p>

<ol>
	<li> List point no. 1 </li>
	<li> List point no. 2 </li>
</ol>

<p><em>Example: Unordered List</em></p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;ul&gt;</span>
	<span class="nt">&lt;li&gt;</span> List point no. 1 <span class="nt">&lt;/li&gt;</span>
	<span class="nt">&lt;li&gt;</span> List point no. 2 <span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span></code></pre></figure>

<p>This translates into: <br /></p>
<ul>
	<li> List point no. 1 </li>
	<li> List point no. 2 </li>
</ul>

<p>We can also create nested lists. Simply, include your list inside the parent <code class="highlighter-rouge">&lt;li&gt;</code> tag.</p>

<p><em>Example: Nested Lists</em></p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;ul&gt;</span>
  <span class="nt">&lt;li&gt;</span>Vegetables<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>Fruits
    <span class="nt">&lt;ul&gt;</span>
      <span class="nt">&lt;li&gt;</span>Apples<span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;</span>Oranges<span class="nt">&lt;/li&gt;</span>
	  <span class="nt">&lt;li&gt;</span>Pears<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>Snacks<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span></code></pre></figure>

<p>will translate into:</p>

<ul>
  <li>Vegetables</li>
  <li>Fruits
    <ul>
      <li>Apples</li>
      <li>Oranges</li>
	  <li>Pears</li>
    </ul>
  </li>
  <li>Snacks</li>
</ul>

<p>Here, “Apples”, “Oranges” and “Pears” are nested list items under Fruits.</p>

<hr />

<h1 id="font-size-colors-families--emphasis">Font Size, Colors, Families &amp; Emphasis</h1>
<p>It is boring to look at a website entirely presented in a same font like Times New Roman or Arial. Also, we can specify a certain font size for the words. We can change this font by using the <code class="highlighter-rouge">style</code> property. This property must be included within the tag (i.e. before closing the tag).</p>

<p><em>Example: Font Size</em></p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;p</span> <span class="na">style=</span><span class="s">"font-size: 12px"</span><span class="nt">&gt;</span> Your Paragraph here <span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;p</span> <span class="na">style=</span><span class="s">"font-size: 30px"</span><span class="nt">&gt;</span> Your Paragraph here <span class="nt">&lt;/p&gt;</span></code></pre></figure>

<p>translates to:</p>

<p style="font-size: 12px"> Your Paragraph here </p>
<p style="font-size: 30px"> Your Paragraph here </p>

<p>We now realise our entire output is in plain black and white. That’s so boring. Let’s add some colors now, with the <code class="highlighter-rouge">color</code> property. This is really simple and similar to the <code class="highlighter-rouge">font-size</code> property.</p>

<p><em>Example: Font Color</em></p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;p</span> <span class="na">style=</span><span class="s">"color: blue"</span><span class="nt">&gt;</span> Blue Paragraph here <span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;p</span> <span class="na">style=</span><span class="s">"color: green"</span><span class="nt">&gt;</span> Green Paragraph here <span class="nt">&lt;/p&gt;</span></code></pre></figure>

<p>And this gives us:</p>

<p style="color: blue"> Blue Paragraph here </p>
<p style="color: green"> Green Paragraph here </p>

<p>Apart from the font size and colors, to change the font-type, we use the <code class="highlighter-rouge">font-family</code> property. This is utilized in the same way as font-size.</p>

<p><em>Example: Font-Family</em></p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;p</span> <span class="na">style=</span><span class="s">"font-family: Garamond"</span><span class="nt">&gt;</span> Your Paragraph here <span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;p</span> <span class="na">style=</span><span class="s">"font-family: Verdana"</span><span class="nt">&gt;</span> Your Paragraph here <span class="nt">&lt;/p&gt;</span></code></pre></figure>

<p>translates to</p>

<p style="font-family: Garamond"> Your Paragraph here </p>
<p style="font-family: Verdana"> Your Paragraph here </p>

<p>Sometimes we need to highlight certain important information. Commonly, we use the bold and emphasis of words to highlight something important. To achieve this in HTML we use the <code class="highlighter-rouge">&lt;strong&gt;</code> and <code class="highlighter-rouge">&lt;em&gt;</code> tags for bold and italics respectively.</p>

<p><em>Example: Text Emphasis</em></p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;p&gt;&lt;strong&gt;</span>Hello There!<span class="nt">&lt;/strong&gt;&lt;/p&gt;</span>
<span class="nt">&lt;p&gt;&lt;em&gt;</span>Hello There!<span class="nt">&lt;/em&gt;&lt;/p&gt;</span></code></pre></figure>

<p>and this gives us:</p>
<p><strong>Hello There!</strong></p>
<p><em>Hello There!</em></p>

<p>To combine multiple properties, we simply use: <code class="highlighter-rouge">&lt;p style="font-size:20px; font-family:Garamond;"&gt;Sample Paragraphy&lt;/p&gt;</code></p>

<p>which produces:</p>

<p style="font-size:20px; font-family:Garamond;">Sample Paragraphy</p>

<p>Simply, separate the various properties with the use of the semi-colon: <code class="highlighter-rouge">;</code></p>

<p>There are many other properties that can be included such as color, font-weight etc. which will be covered under CSS which stands for Cascadin Style Sheets. CSS can simplify and is the professional method to style web elements.</p>

<hr />

<h1 id="tables">Tables</h1>
<p>We can add tables to our HTML code by using tables. To achieve this, we utilize <code class="highlighter-rouge">&lt;table&gt;</code>, <code class="highlighter-rouge">&lt;th&gt;</code>, <code class="highlighter-rouge">&lt;tr&gt;</code>, <code class="highlighter-rouge">&lt;td&gt;</code>. That may be a lot of tags, but it helps to structure our table nicely. <code class="highlighter-rouge">&lt;tr&gt;</code> refers to the table row, <code class="highlighter-rouge">&lt;td&gt;</code> refers to the table column and <code class="highlighter-rouge">&lt;th&gt;</code> refers to the row heading.</p>

<p><em>Example: Tables</em></p>

<figure class="highlight"><pre><code class="language-html" data-lang="html">	
<span class="nt">&lt;table&gt;</span>
  <span class="nt">&lt;tr&gt;</span>
  <span class="nt">&lt;th&gt;</span>Jack's Details<span class="nt">&lt;/th&gt;</span>
  <span class="nt">&lt;th&gt;</span>Mary's Details<span class="nt">&lt;/th&gt;</span>
<span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;tr&gt;</span>
    <span class="nt">&lt;td&gt;</span>Jack<span class="nt">&lt;/td&gt;</span>
	<span class="nt">&lt;td&gt;</span>Mary<span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;tr&gt;</span>
	  <span class="nt">&lt;td&gt;</span>Anderson<span class="nt">&lt;/td&gt;</span>
	  <span class="nt">&lt;td&gt;</span>Smith<span class="nt">&lt;/td&gt;</span> 
  <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;tr&gt;</span>
	<span class="nt">&lt;td&gt;</span>21<span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td&gt;</span>24<span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;/tr&gt;</span>
<span class="nt">&lt;/table&gt;</span></code></pre></figure>

<p>This gives us:</p>

<table>
	<tr>
  <th>Jack's Details</th>
  <th>Mary's Details</th>
</tr>
  <tr>
    <td>Jack</td>
	<td>Mary</td>
  </tr>
  <tr>
	  <td>Anderson</td>
	  <td>Smith</td> 
  </tr>
  <tr>
	<td>21</td>
    <td>24</td>
  </tr>
</table>

<p>If you look at what is being written, we can see that we define the table is a very structured way, row by row. The top row is the heading and uses the <code class="highlighter-rouge">&lt;th&gt;</code> tag. Subsequent rows (<code class="highlighter-rouge">&lt;tr&gt;</code>) uses <code class="highlighter-rouge">&lt;td&gt;</code> to indicate the details such as First Name, Last Name and Ages. The entire table is enclosed with the <code class="highlighter-rouge">&lt;table&gt;</code> and <code class="highlighter-rouge">&lt;/table&gt;</code> tags which mark the start and end of the table respectively.</p>

<hr />

<p>With the above information, we can create a simple website! Here’s a sample:</p>

<noscript><pre>&lt;!DOCTYPE html&gt;
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;My Webpage&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;h1&gt;My Hobbies&lt;/h1&gt;
		&lt;p&gt;My hobbies are swimming, badminton and writing code.&lt;/p&gt;
		
		&lt;h1&gt;My Current Projects&lt;/h1&gt;
		&lt;p&gt;I am currently developing the technological breakthrough in computer sciences.&lt;/p&gt;
		
		&lt;h2&gt;Additional Information&lt;/h2&gt;
		&lt;p&gt;I am currenly involved in blah...blah...blah...&lt;/p&gt;
		
		&lt;h3&gt;My Favorite Picture&lt;/h3&gt;
		&lt;img src=&quot;https://lh5.ggpht.com/cb7PU-mvWE1_JxMlpQwyNfMk7yL9kUByZj3bS2YLcPkLor8V6RfkwMzt76_BsZaz0rad=h900&quot;&gt;
		
		&lt;h3&gt;Some Emphasis on Text! &lt;/h3&gt;
		&lt;p&gt;&lt;strong&gt;Hello There!&lt;/strong&gt;&lt;/p&gt;
		&lt;p&gt;&lt;em&gt;Hello There!&lt;/em&gt;&lt;/p&gt;
		
		&lt;h3&gt;Hyperlinks... A lot of them! &lt;/h3&gt;
		&lt;a href=&quot;www.google.com&quot;&gt;Google&lt;/a&gt;
		&lt;a href=&quot;www.yahoo.com&quot;&gt;Yahoo!&lt;/a&gt;
		&lt;a href=&quot;www.apple.com&quot;&gt;Apple&lt;/a&gt;
		&lt;a href=&quot;www.samsung.com&quot;&gt;Samsung&lt;/a&gt;
		&lt;a href=&quot;www.bing.com&quot;&gt;Bing&lt;/a&gt;
		&lt;a href=&quot;www.download.com&quot;&gt;Download.com&lt;/a&gt;
		&lt;a href=&quot;www.harishv7.github.io/tech&quot;&gt;My website!&lt;/a&gt;
		
		&lt;h3&gt; My List! &lt;/h3&gt;
		&lt;ul&gt;
		  &lt;li&gt;Vegetables&lt;/li&gt;
		  &lt;li&gt;Fruits
		    &lt;ul&gt;
		      &lt;li&gt;Apples&lt;/li&gt;
		      &lt;li&gt;Oranges&lt;/li&gt;
			  &lt;li&gt;Pears&lt;/li&gt;
		    &lt;/ul&gt;
		  &lt;/li&gt;
		  &lt;li&gt;Snacks&lt;/li&gt;
		&lt;/ul&gt;
		
		&lt;h3 style=&quot;font-family: Garamond&quot;&gt;Just playing with some styles&lt;/h3&gt;
		&lt;p style=&quot;color: blue&quot;&gt;Blue Text!&lt;/p&gt;
		&lt;p style=&quot;color: green&quot;&gt;Green Text!&lt;/p&gt;
		&lt;p style=&quot;color: yellow&quot;&gt;Yellow Text!&lt;/p&gt;
		&lt;p style=&quot;color: violet&quot;&gt;Violet Text!&lt;/p&gt;
		
		&lt;h2&gt; A Sample Table &lt;/h2&gt;
		&lt;table&gt;
			&lt;tr&gt;
		  &lt;th&gt;Jack&#39;s Details&lt;/th&gt;
		  &lt;th&gt;Mary&#39;s Details&lt;/th&gt;
		&lt;/tr&gt;
		  &lt;tr&gt;
		    &lt;td&gt;Jack&lt;/td&gt;
			&lt;td&gt;Mary&lt;/td&gt;
		  &lt;/tr&gt;
		  &lt;tr&gt;
			  &lt;td&gt;Anderson&lt;/td&gt;
			  &lt;td&gt;Smith&lt;/td&gt; 
		  &lt;/tr&gt;
		  &lt;tr&gt;
			&lt;td&gt;21&lt;/td&gt;
		    &lt;td&gt;24&lt;/td&gt;
		  &lt;/tr&gt;
		&lt;/table&gt;
		
		
	&lt;/body&gt;
&lt;/html&gt;</pre></noscript>
<script src="https://gist.github.com/harishv7/414c2db23055af890658.js"> </script>

<p>The output will look like this:
<a href="http://i.imgur.com/SmHrvHN.png">Image</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>Tutorial - Introduction to HTML (Part 1)</title>
	  <link>/blog//Introduction-to-HTML-Part-1</link>
	  <author>Harish V</author>
	  <pubDate>2015-09-20T00:00:00+08:00</pubDate>
	  <guid>/blog//Introduction-to-HTML-Part-1</guid>
	  <description><![CDATA[
	     <h1 id="introduction">Introduction</h1>

<p>In this first part of the Introduction to HTML, I will be going through the basics of HTML.</p>

<p>HTML stands for HyperText Markup Language. This is the standard markup language which allows web browsers (such as Internet Explorer/Firefox/Chrome) to render content into the webpages you visit (yes, including this one). If you haven’t been acquainted with HTML at all, you might want to try right-click and “view page source” on Chrome/Firefox browsers. A typical screenshot of the page source (from Apple.com) is this:
<img src="http://i.imgur.com/Hsg4sWu.png" alt="HTML page source of Apple.com" /></p>

<p>Please don’t be daunted by the intimidating lines of code. We will start right from the basics.</p>

<hr />

<h1 id="structure-of-a-html-file">Structure of a HTML File</h1>

<noscript><pre>&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;
			&lt;h1&gt; Heading 1 &lt;/h1&gt;
		
		&lt;/title&gt;	
	&lt;/head&gt;
	&lt;body&gt;
		&lt;p&gt; Start of a paragraph &lt;/p&gt;
	&lt;/body&gt;
	&lt;footer&gt;
		
	&lt;/footer&gt;
&lt;/html&gt;</pre></noscript>
<script src="https://gist.github.com/harishv7/6896f30b6453a9cc5ae7.js"> </script>

<p>The above is the basic structure of a HTML file. The document starts with <code class="highlighter-rouge"><span class="nt">&lt;html&gt;</span></code> tag which defines the start of the document. The file is basically divided into 3 major sections, namely, <code class="highlighter-rouge">&lt;head&gt;</code>, <code class="highlighter-rouge">&lt;body&gt;</code> and <code class="highlighter-rouge">&lt;footer&gt;</code>.</p>

<p>The head contains basic information such as the title of the webpage and some scripts or resources to be loaded when the file is opened.</p>

<p>The body contains the main content of what the user is to see and the optional footer typically contains links to the various sections of the website etc.</p>

<p>Firstly, in the head tag, we can include the site’s title. For example:
<code class="highlighter-rouge">
	&lt;head&gt; 
		&lt;title&gt; My Title &lt;/title&gt;
	&lt;/head&gt;
</code></p>

<p>The above snippet will specify that the title of the webpage is “My Title”.</p>

<p>Now you can also try this out by copying the above snippet(s), pasting it into an editor of your choice (eg: Notepad/TextEdit/TextMate). If you are clueless which editor to use, I would suggest using <a href="http://www.sublimetext.com/">Sublime Text</a>.</p>

<hr />

<h1 id="headings">Headings</h1>

<p>We can highlight certain parts of the page by selecting different sizes of headers. This is done with the header tag. Headings range from <code class="highlighter-rouge">&lt;h1&gt;</code> to <code class="highlighter-rouge">&lt;h6&gt;</code>, where h1 defines the largest heading and h6 is the smallest.</p>

<p>For example:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>&lt;h1&gt; This is a big heading &lt;/h1&gt;
</code></pre>
</div>

<p>translates to:</p>
<h1> This is a big heading </h1>

<p>and</p>

<div class="highlighter-rouge"><pre class="highlight"><code>&lt;h6&gt; This is a small heading &lt;/h6&gt;
</code></pre>
</div>

<p>translates to:</p>
<h6> This is a small heading </h6>

<hr />

<h1 id="paragraphs">Paragraphs</h1>

<p>We can include paragraphs with the <code class="highlighter-rouge">&lt;p&gt;</code> tag.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>&lt;p&gt; hello, i am harish. this is a sample paragraph. &lt;/p&gt;
</code></pre>
</div>

<p>translates to</p>
<p> hello, i am harish. this is a sample paragraph. </p>

<h1 id="images">Images</h1>

<p>No webpage is complete with just some simple text. So how do we add images?
You do it with the <code class="highlighter-rouge">&lt;img&gt;</code> tag.</p>

<p>The full tag looks like</p>

<p><code class="highlighter-rouge">&lt;img src="https://upload.wikimedia.org/wikipedia/en/6/65/Hello_logo_sm.gif"&gt;</code></p>

<p>translates to</p>

<p><img src="https://upload.wikimedia.org/wikipedia/en/6/65/Hello_logo_sm.gif" /></p>

<p>There you go. You have just added an image to your page.</p>

<p>Adding from local folders (pictures residing on your computer, offline) is slightly trickier. For example, if the picture is in the same folder as where you save your html file, and is called “picture.jpg”, then your image tag will look like this:</p>

<p><code class="highlighter-rouge">&lt;img src="picture.jpg"&gt;</code>. If it is in a subfolder of your current html file, then it would look something like <code class="highlighter-rouge">&lt;img src="subfolder/picture.jpg"&gt;</code></p>

<hr />

<p>That’s all for the first part. A sample webpage that you should have by now should be something like this:</p>
<noscript><pre>&lt;!DOCTYPE html&gt;
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;My Webpage&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;h1&gt;My Hobbies&lt;/h1&gt;
		&lt;p&gt;My hobbies are swimming, badminton and writing code.&lt;/p&gt;
		&lt;h1&gt;My Current Projects&lt;/h1&gt;
		&lt;p&gt;I am currently developing the technological breakthrough in computer sciences.&lt;/p&gt;
		&lt;h2&gt;Additional Information&lt;/h2&gt;
		&lt;p&gt;I am currenly involved in blah...blah...blah...&lt;/p&gt;
		&lt;h3&gt;My Favorite Picture&lt;/h3&gt;
		&lt;img src=&quot;https://lh5.ggpht.com/cb7PU-mvWE1_JxMlpQwyNfMk7yL9kUByZj3bS2YLcPkLor8V6RfkwMzt76_BsZaz0rad=h900&quot;&gt;
	&lt;/body&gt;
&lt;/html&gt;</pre></noscript>
<script src="https://gist.github.com/harishv7/051a48b69f31e427ece7.js"> </script>

<p>that looks like this:</p>

<p><img src="http://i.imgur.com/sRCwIoD.png" alt="Screenshot of Sample HTML Page" /></p>

<p>Part 2 coming up soon.</p>

<p>Cheers, <br />
V.Harish</p>

	  ]]></description>
	</item>


</channel>
</rss>
