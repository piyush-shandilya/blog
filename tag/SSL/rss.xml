<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://harishv.me/</title>
   
   <link>http://harishv.me</link>
   <description>My thoughts - on life, code and everything in between.</description>
   <language>en-uk</language>
   <managingEditor> Harish V</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>HTTPS - What's the Big Deal?</title>
	  <link>/blog//HTTPS-What's-the-Big-Deal</link>
	  <author>Harish V</author>
	  <pubDate>2017-05-10T00:00:00+08:00</pubDate>
	  <guid>/blog//HTTPS-What's-the-Big-Deal</guid>
	  <description><![CDATA[
	     <h3 id="what-is-http">What is HTTP?</h3>

<p>HTTP stands for Hypertext Transfer Protocol. It is the protocol used by the World Wide Web and it forms the basis for how data is transmitted over the Internet and how servers and browsers respond to various requests. Essentially, it the “procedure” which helps define how data or messages should be exchanged by different parties on the Internet.</p>

<h3 id="the-problem-with-http">The Problem with HTTP</h3>

<p><img src="http://imgur.com/Bsb0pyL.png" alt="" /></p>

<p>The problem with HTTP is that it does not provide for <strong>Integrity, Authentication and Privacy</strong>. That means data transmitted over HTTP alone is easy to intercept and makes you susceptible to a whole range of attacks which can compromise the 3 factors mentioned above (which you would ideally want when you surf the web).</p>

<h3 id="how-about-https">How about HTTPS?</h3>

<p>HTTPS is essentially HTTP running over Secure Socket Layer (SSL). HTTPS works by encrypting the HTTP message before the exchange and when received on the other side, it decrypts the message.</p>

<p>In comparison, if HTTP is used, sensitive information which may be credit card information, your identity numbers, login credentials such as passwords etc. will be transmitted over the server as plaintext. This leaves the exchange vulnerable to “eavesdropping” which means an attacker can intercept the message and use it for harmful purposes.</p>

<h3 id="how-do-ssl-certificates-work">How do SSL Certificates work?</h3>

<ul>
  <li>When a browser/server tries to connect to a webpage secured with SSL, it first requests the web server to identify itself.</li>
  <li>The web server then sends the client or server its SSL certificate.</li>
  <li>The browser checks the SSL certificate to know if it can trust it. If it is able to trust the SSL certificate, it sends a message to the web server acknowledge this.</li>
  <li>The web server is now ready to establish an SSL encyrpted session with the client/server and sends a digital acknowledgement back.</li>
  <li>Now when messages or data is transferred between these 2 entities, they will be encrypted based on a mutually agreed ciphersuite.</li>
</ul>

<p>The above process where the browser and web sever initiate a secure session is called an SSL Handshake.</p>

<p><em>Note:</em> Anyone can create a SSL certificate, but it must be digitally signed by a trusted <a href="https://en.wikipedia.org/wiki/Certificate_authority">Certification Authority (CA)</a>. Most computers come with a pre-installed list of CAs they can trust and when the browser checks the SSL certificate, it verifies the digital signature against this list.</p>

<h3 id="public-and-private-keys">Public and Private Keys</h3>

<p>You would have probably heard about <a href="https://en.wikipedia.org/wiki/Public-key_cryptography">asymmetric cryptography</a>, also known as, public-key cryptography. In this type of asymmetric encryption, two types of keys are involved: public key and private key. The names speak for themselves. Public keys are made public, that is anyone is able to know them. Private keys are private, which means no one other than yourself will be able to access this private key.</p>

<p>Now when someone wants to send me some document, they will simply encrypt the document with my public key (which is accessible by anyone and everyone). Then, they send me this document. Now, I just need to use my private key (which is only known to me) to decrypt this. This ensures that only the <em>intended</em> receipient of the message will be able to decrypt and hence, access the message.</p>

<p>Similarly, if I am sending someone my document, I will encrypt the document with my private key. The receipient of the document will now use my public key to decrypt it and access the document. This helps to identify that the document <em>truly</em> came from me.</p>

<h3 id="ssl-transaction">SSL Transaction</h3>

<p>To set up the SSL session, we need 3 keys: public key, private key and session key. As disucussed above the public and private keys are effective in ensuring that the data is reliable and authentic. However, this requires considerable amount of processing power. Hence, we use the session key to encrypt any transmitted data <em>following</em> the SSL handshake.</p>

<h3 id="adding-ssl-to-your-website">Adding SSL to your website</h3>

<p>To add SSL, you will have to first purchase a SSL certificate, activate it, install the certificate and finally configure your site to use the certificate. There are tons of tutorials online on how to do that.</p>

<p>You can also get free SSL protection with Cloudflare. To know how you can add free SSL to your website, check <a href="/blog//Adding-SSL-to-Your-Site-for-Free">this</a> post out!</p>

	  ]]></description>
	</item>

	<item>
	  <title>Adding SSL to Your Site (Free!)</title>
	  <link>/blog//Adding-SSL-to-Your-Site-for-Free</link>
	  <author>Harish V</author>
	  <pubDate>2017-04-24T00:00:00+08:00</pubDate>
	  <guid>/blog//Adding-SSL-to-Your-Site-for-Free</guid>
	  <description><![CDATA[
	     <p>I have been using <a href="https://pages.github.com/">GitHub Pages</a> to host my static websites for several years now. But recently, this error notice worried me.</p>

<p><img src="assets/images/posts/SSL_error.png" alt="SSL Error Message" /></p>

<p>This happens when you visit my website, harishv.me, with a <code class="highlighter-rouge">www</code> in front. This redirects to <a href="https://harishv.me">https://harishv.me</a> and all you will see is this <code class="highlighter-rouge">ERR_SSL_PROTOCOL_ERROR</code> as the site is unable to provide a secure connection.</p>

<p>If you are using a normal GitHub Pages site, which means it has a domain that has <code class="highlighter-rouge">.github.io</code>, you can simply go to the GitHub repository you are using, click settings, go all the way down till you see <code class="highlighter-rouge">Enforce HTTPS</code>. Clicking this will mean that your site will always be served over HTTPS.</p>

<p>When researching for free SSL options to add onto my website, I found that you can actually use <a href="https://www.cloudflare.com/">Cloudflare’s</a> name servers under their free plan to obtain a SSL certificate for your website.</p>

<p>Simply,</p>

<ol>
  <li>Create a <a href="https://www.cloudflare.com/">Cloudflare</a> account</li>
  <li>Allow Cloudflare to scan your website records</li>
  <li>Check and verify that the automatically generated records by Cloudflare matches with those on your registrar’s page (in my case, this is <a href="http://namecheap.com/">Namecheap.com</a>)</li>
  <li>Cloudflare will now give you 2 nameservers to add into your account</li>
  <li>Login to Namecheap</li>
  <li>Click on Domains List</li>
  <li>Select the domain you want to add SSL for and click on <code class="highlighter-rouge">Manage</code> at the right side</li>
  <li>Under nameservers, copy and paste the 2 nameservers Cloudflare gave you</li>
  <li>Once done, on Cloudflare’s Overview tab, click on <code class="highlighter-rouge">Recheck Nameservers</code></li>
</ol>

<p>Cloudflare also offers up to three page rules in the free plan. With this, we can always enforce a `https on our website. To do that,</p>

<ol>
  <li>Click on the Page Rule tab at the top in Cloudflare</li>
  <li>Enter this: <code class="highlighter-rouge">http://*&lt;your-domain-name&gt;.com/*</code></li>
  <li>Add the settings to be <code class="highlighter-rouge">Always Use HTTPS</code></li>
  <li>Click on <code class="highlighter-rouge">Save and Deploy</code></li>
</ol>

<p>The asterisks are like wildcard patterns which means any URLs entered in that format will be enforced to utilise HTTPS connection. For example, <a href="www.harishv.me">www.harishv.me</a> or <a href="http://harishv.me/blog">http://harishv.me/blog</a> will all now be enforced with HTTPS.</p>

<p>That’s all folks. Get your free SSL certificate with Cloudflare now!</p>

<p>P.S. If you’re wondering why is HTTPS that big of a deal, wait a few days for my next article on HTTPS - What’s the Big Deal?.</p>

	  ]]></description>
	</item>


</channel>
</rss>
